#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# jb_fls - JetBrains Floatingcheck
#
# Copyright (C) 2020  Marius Rieder <marius.rieder@durchmesser.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


import datetime


factory_settings['jb_fls_default_levels'] = {
    'lastCallHome': (4500, 7200),
    'updateAvailable': 'W',
}


def parse_jb_fls(lines):
    parsed = {'connection': []}
    for line in lines:
        if line[0] == 'connection':
            parsed['connection'].append(line[1])
        else:
            parsed[line[0]] = line[1:]
    return parsed


def inventory_jb_fls(parsed):
    if 'serverUID' in parsed:
        yield parsed['serverUID'], {}


def check_jb_fls(item, params, parsed):
    if parsed.get('serverUID', None) != item:
        return

    if parsed.get('health', 500) != '200':
        yield 1, "Not healthy %s" % parsed.get('heath', 'Unknown')

    
    yield 0, 'Version: %s' % parsed.get('currentVersion', 'Unknown')
    if parsed.get('updateAvailable', 'False') != 'False':
        updateAvailableStatus = params.get('updateAvailable', 'W')
        if updateAvailableStatus == 'C':
            yield 2, _('update available')
        elif updateAvailableStatus == 'W':
            yield 1, _('update available')
        elif updateAvailableStatus == 'O':
            yield 0, _('update available')


    for line in parsed.get('connection', []):
        if line[1] != 'OK':
            yield 2, _('Connection to %s is %s') % line


    now = datetime.datetime.now()
    lastCallHome = datetime.datetime.strptime(parsed['lastCallHome'], '%d %b %Y %H:%M')
    age = (now - lastCallHome).total_seconds()
    yield check_levels(age,
                       'age',
                       params.get('lastCallHome', None),
                       human_readable_func=get_age_human_readable,
                       infoname=_('Last call home'))


check_info['jb_fls'] = {
  'parse_function'     : parse_jb_fls,
  'inventory_function' : inventory_jb_fls,
  'check_function'     : check_jb_fls,
  'service_description': 'JB FLS %s',
  'has_perfdata': True,
  'group': 'jb_fls',
  'default_levels_variable': 'jb_fls_default_levels',
}
